// <auto-generated />
using System;
using MVC_CRUD.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVC_CRUD.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220605065015_CreateTablesinttttt")]
    partial class CreateTablesinttttt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("MVC_CRUD.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Meta_Title");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Parent_Id");

                    b.Property<string>("Slug")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasMaxLength(75)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MVC_CRUD.Data.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Author_Id");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Meta_Title");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Parent_Id");

                    b.Property<int>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("MVC_CRUD.Data.Entities.PostCategory", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Post_Id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Category_Id");

                    b.HasKey("PostId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PostCategories");
                });

            modelBuilder.Entity("MVC_CRUD.Data.Entities.PostComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Parent_Id");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Post_Id");

                    b.Property<int>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("MVC_CRUD.Data.Entities.PostMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Post_Id");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostMetas");
                });

            modelBuilder.Entity("MVC_CRUD.Data.Entities.PostTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Post_Id");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Tag_Id");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("MVC_CRUD.Data.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MVC_CRUD.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("First_Name");

                    b.Property<string>("Intro")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("TEXT")
                        .HasColumnName("Last_Login");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("Last_Name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("Middle_Name");

                    b.Property<string>("Mobile")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("Password_Hash");

                    b.Property<string>("Profile")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("Registered_At");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MVC_CRUD.Data.Entities.Post", b =>
                {
                    b.HasOne("MVC_CRUD.Data.Entities.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("MVC_CRUD.Data.Entities.PostCategory", b =>
                {
                    b.HasOne("MVC_CRUD.Data.Entities.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_CRUD.Data.Entities.Post", "Post")
                        .WithMany("Categories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("MVC_CRUD.Data.Entities.PostComment", b =>
                {
                    b.HasOne("MVC_CRUD.Data.Entities.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("MVC_CRUD.Data.Entities.PostMeta", b =>
                {
                    b.HasOne("MVC_CRUD.Data.Entities.Post", "Post")
                        .WithMany("PostMetas")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("MVC_CRUD.Data.Entities.PostTag", b =>
                {
                    b.HasOne("MVC_CRUD.Data.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_CRUD.Data.Entities.Tag", "Tag")
                        .WithMany("Posts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MVC_CRUD.Data.Entities.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("MVC_CRUD.Data.Entities.Post", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("PostComments");

                    b.Navigation("PostMetas");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("MVC_CRUD.Data.Entities.Tag", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("MVC_CRUD.Data.Entities.User", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
